data$MRData$DriverTable$Drivers %>%
dplyr::select(driverId,
givenName,
familyName,
nationality,
dateOfBirth) %>%
tibble::as_tibble()
} else{
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/drivers.json?limit=40',
season = season))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$DriverTable$Drivers %>%
dplyr::select(driverId,
givenName,
familyName,
nationality,
dateOfBirth,
code,
permanentNumber) %>%
tibble::as_tibble()
}
}
load_drivers <- memoise::memoise(.load_drivers)
f1dataR::load_drivers(1980)
load_drivers(1980)
load_drivers(19802)
load_drivers(1940)
load_drivers(1950)
load_drivers(2013)
load_drivers(2014)
season = 2013
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/drivers.json?limit=40',
season = season))
jsonlite::fromJSON(rawToChar(res$content))
data$MRData$DriverTable$Drivers
season
f1dataR::load_results(2000)
season = 2013
season = 2003
res <-  httr::GET(glue::glue(
'http://ergast.com/api/f1/{season}/{round}/results.json?limit=40',
season = season,
round = round
))
round = 'last'
res <-  httr::GET(glue::glue(
'http://ergast.com/api/f1/{season}/{round}/results.json?limit=40',
season = season,
round = round
res <-  httr::GET(glue::glue(
'http://ergast.com/api/f1/{season}/{round}/results.json?limit=40',
season = season,
round = round
))
res <-  httr::GET(glue::glue(
'http://ergast.com/api/f1/{season}/{round}/results.json?limit=40',
season = season,
round = round
))
jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]]
jsonlite::fromJSON(rawToChar(res$content))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]]
data$MRData$RaceTable$Races$Results[[1]] %>% str()
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, Constructor))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time)) %>%
dplyr::select(driverId, position, points, grid:AverageSpeed)
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time)) %>%
dplyr::select(driverId, position, points, grid:time)
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time)) %>%
dplyr::select(driverId, position, points, grid:time)
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time)) %>%
dplyr::select(driverId, position, points, grid:time) %>%
tibble::as_tibble()
season  = 2004
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/results.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::select(
driverId:status,
gap = `time...6`,
fastest_rank =  rank,
laps,
fastest = `time...9`,
top_speed_kph = speed
) %>%
dplyr::mutate(time_sec = time_to_sec(fastest)) %>%
tibble::as_tibble()
ata$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::select(
driverId:status,
gap = `time...6`,
fastest_rank =  rank,
laps,
fastest = `time...9`,
top_speed_kph = speed
)
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::select(
driverId:status,
gap = `time...6`,
fastest_rank =  rank,
laps,
fastest = `time...9`,
top_speed_kph = speed
)
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap))
.load_results <- function(season = 'current', round = 'last'){
if(season != 'current' & (season < 1950 | season > 2022)){
stop('Year must be between 1950 and 2022 (or use "current")')
}
if(season < 2004){
res <-  httr::GET(glue::glue(
'http://ergast.com/api/f1/{season}/{round}/results.json?limit=40',
season = season,
round = round
))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time)) %>%
dplyr::select(driverId, position, points, grid:time) %>%
tibble::as_tibble()
} else{
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/results.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, points,position, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::select(
driverId:status,
gap = `time...6`,
fastest_rank =  rank,
laps,
fastest = `time...9`,
top_speed_kph = speed
) %>%
dplyr::mutate(time_sec = time_to_sec(fastest)) %>%
tibble::as_tibble()
}
}
load_results <- memoise::memoise(.load_results)
season = 2000
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
data$MRData$RaceTable$Races$QualifyingResults[[1]]
data
data
data$MRData$RaceTable$Races
data$MRData$RaceTable
round = 1
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races
data$MRData$RaceTable$Races$QualifyingResults[[1]]
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages()
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver))
season
season <- 2004
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
season <- 2005
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
season <- 2011
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
season <- 2007
lue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
season <- 2006
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
season <- 2005
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
season <-1950
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/qualifying.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$QualifyingResults[[1]]
data$MRData$RaceTable$Races
round
data$MRData$RaceTable$Races$QualifyingResults[[1]] %>%
tidyr::unnest(cols = c(Driver)) %>%
dplyr::select(driverId, position,Q1:Q3 ) %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::mutate(Q1_sec = time_to_sec(Q1),
Q2_sec = time_to_sec(Q2),
Q3_sec = time_to_sec(Q3)) %>%
tibble::as_tibble()
f1dataR::load_standings()
f1dataR::load_standings(2060)
f1dataR::load_standings(1950)
f1dataR::load_schedule()
f1dataR::load_schedule(1950)
f1dataR::load_schedule(1980)
f1dataR::load_schedule(2000)
f1dataR::load_schedule(2004)
f1dataR::load_schedule(2005)
season <- 2004
res <-
httr::GET(glue::glue('http://ergast.com/api/f1/{season}.json?limit=30', season = season))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races
data$MRData$RaceTable$Races %>%
tidyr::unnest(cols = c(Circuit), names_repair = 'universal')
data$MRData$RaceTable$Races %>%
tidyr::unnest(cols = c(Circuit), names_repair = 'universal') %>%
janitor::clean_names() %>%
suppressWarnings() %>%
suppressMessages() %>%
tidyr::unnest(cols = c(location))
data$MRData$RaceTable$Races %>%
tidyr::unnest(cols = c(Circuit), names_repair = 'universal') %>%
janitor::clean_names() %>%
suppressWarnings() %>%
suppressMessages() %>%
tidyr::unnest(cols = c(location)) %>%
dplyr::select(season,
round,
race_name,
circuit_id,
circuit_name,
lat:country,
date) %>%
tibble::as_tibble()
season <- 1950
res <-
httr::GET(glue::glue('http://ergast.com/api/f1/{season}.json?limit=30', season = season))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races %>%
tidyr::unnest(cols = c(Circuit), names_repair = 'universal') %>%
janitor::clean_names() %>%
suppressWarnings() %>%
suppressMessages() %>%
tidyr::unnest(cols = c(location)) %>%
dplyr::select(season,
round,
race_name,
circuit_id,
circuit_name,
lat:country,
date) %>%
tibble::as_tibble()
f1dataR::load_pitstops(2012)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
library(f1dataR)
get_driver_telemetry(2022, 1, driver = 'LEC', fastest_only = T)
get_driver_telemetry(2022, 1, driver = 'LEC', fastest_only = T) %>%
head(300)
lec
lec <- get_driver_telemetry(2022, 1, driver = 'LEC', fastest_only = T) %>%
head(300)
lec
lec$Date
lec$Date %>% as.numeric()
lec
le
le
lec
ggplot(lec, aes(index, Speed))+
geom_line()+
theme_minimal()
devtools::document()
devtools::load_all()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_articles()
f1dataR::load_results()
f1dataR::load_results(2021)
season == 2022
season = 2022
round = 'last'
season != 'current' & (season < 1950 | season > 2022
)
season < 2004
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/results.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]]
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, points,position, grid:AverageSpeed)
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/results.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, points,position, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages()
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/results.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, points,position, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages() %>% view()
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/results.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, points,position, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages() %>% View()
.load_results <- function(season = 'current', round = 'last'){
if(season != 'current' & (season < 1950 | season > 2022)){
stop('Year must be between 1950 and 2022 (or use "current")')
}
if(season < 2004){
res <-  httr::GET(glue::glue(
'http://ergast.com/api/f1/{season}/{round}/results.json?limit=40',
season = season,
round = round
))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time)) %>%
dplyr::select(driverId, position, points, grid:time) %>%
tibble::as_tibble()
} else{
res <-  httr::GET(glue::glue('http://ergast.com/api/f1/{season}/{round}/results.json?limit=40', season = season, round = round))
data <- jsonlite::fromJSON(rawToChar(res$content))
data$MRData$RaceTable$Races$Results[[1]] %>%
tidyr::unnest(cols = c(Driver, Time, FastestLap)) %>%
dplyr::select(driverId, points,position, grid:AverageSpeed) %>%
tidyr::unnest(cols = c(Time, AverageSpeed),
names_repair = 'universal') %>%
suppressWarnings() %>%
suppressMessages() %>%
dplyr::select(
driverId:status,
gap = `time...8`,
fastest_rank =  rank,
laps,
fastest = `time...11`,
top_speed_kph = speed
) %>%
dplyr::mutate(time_sec = time_to_sec(fastest)) %>%
tibble::as_tibble()
}
}
load_results <- memoise::memoise(.load_results)
load_results(2003)
load_results(2021)
devtools::document()
devtools::document()
devtools::load_all()
if (!require("remotes")) install.packages("remotes")
remotes::install_github("SCasanova/f1dataR")
Sys.unsetenv('GITHUB_PAT')
if (!require("remotes")) install.packages("remotes")
remotes::install_github("SCasanova/f1dataR")
if (!require("remotes")) install.packages("remotes")
remotes::install_github("SCasanova/f1dataR")
if (!require("remotes")) install.packages("remotes")
remotes::install_github("SCasanova/f1dataR")
Sys.unsetenv('GITHUB_PAT')
if (!require("remotes")) install.packages("remotes")
remotes::install_github("SCasanova/f1dataR")
devtools::document()
devtools::load_all()
Sys.unsetenv('GITHUB_PAT')
if (!require("remotes")) install.packages("remotes")
remotes::install_github("SCasanova/f1dataR")
f1dataR::load_results()
driver_constructor_data <- readr::read_csv('data-raw/driverConstructorData.csv')
usethis::use_data(driver_constructor_data, overwrite = T)
devtools::document()
devtools::load_all()
driver_constructor_data
readr::read_csv('data-raw/driverConstructorData.csv')
driver_constructor_data <- readr::read_csv('data-raw/driverConstructorData.csv')
driver_constructor_data
usethis::use_data(driver_constructor_data, overwrite = T)
