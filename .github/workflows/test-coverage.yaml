# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: test-coverage

jobs:
  test-coverage:
    name: Test coverage - up to date packages

    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::covr
            any::devtools
          needs: coverage

      - name: setup r-reticulate venv
        shell: Rscript {0}
        run: |
          python_packages <- c("numpy", "fastf1")

          library(reticulate)
          virtualenv_create("r-reticulate", Sys.which("python"))
          virtualenv_install("r-reticulate", python_packages)

          path_to_python <- virtualenv_python("r-reticulate")
          writeLines(sprintf("RETICULATE_PYTHON=%s", path_to_python),
                     Sys.getenv("GITHUB_ENV"))

      - name: Test coverage
        run: |
          covr::codecov(
            code = "devtools::test(stop_on_failure = FALSE, stop_on_warning = FALSE)",
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          find ${{ runner.temp }}/package -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package

  test-coverage-oldff1:
    name: Test coverage - old fastf1

    runs-on: ubuntu-latest

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::covr
            any::devtools
          needs: coverage

      - name: setup r-reticulate venv
        shell: Rscript {0}
        run: |
          python_packages <- c("urllib3", "fastf1==3.3.9")

          library(reticulate)
          virtualenv_create("r-reticulate", Sys.which("python"))
          virtualenv_install("r-reticulate", python_packages)

          path_to_python <- virtualenv_python("r-reticulate")
          writeLines(sprintf("RETICULATE_PYTHON=%s", path_to_python),
                     Sys.getenv("GITHUB_ENV"))

      - name: Test coverage
        run: |
          covr::codecov(
            code = "devtools::test(stop_on_failure = FALSE, stop_on_warning = FALSE)",
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          find ${{ runner.temp }}/package -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package

  test-coverage-hard:
    # NOTE: This workflow only directly installs "hard" dependencies, i.e. Depends,
    # Imports, and LinkingTo dependencies. Notably, Suggests dependencies are never
    # installed, with the exception of testthat, knitr, and rmarkdown. The cache is
    # never used to avoid accidentally restoring a cache containing a suggested
    # dependency.

    runs-on: ubuntu-latest

    name: Test coverage - HARD

    strategy:
      fail-fast: false

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          dependencies: '"hard"'
          cache: false
          extra-packages: |
            any::rcmdcheck
            any::testthat
            any::knitr
            any::rmarkdown
            any::markdown
            any::covr
            any::devtools
          needs: coverage

      - name: Test coverage
        run: |
          covr::codecov(
            code = "devtools::test(stop_on_failure = FALSE, stop_on_warning = FALSE)",
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(Sys.getenv("RUNNER_TEMP"), "package")
          )
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          find ${{ runner.temp }}/package -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package

  test-pkgdown-ok:
    name: Test pkgdown ok
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::pkgdown, local::.
          needs: website

      - name: Test pkgdown
        run: |
          pkgdown::build_reference()
          pkgdown::build_articles()
        shell: Rscript {0}
