---
title: "Introduction"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Introduction}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  out.width = "100%",
  fig.width = 7,
  fig.height = 4,
  fig.path = "introduction-"
)

# Use a local temporary cache and set back to user's info when finished vignette build
withr::local_file(file.path(tempdir(), "vignettes", "vig_build_tmp"))
if (dir.exists(file.path(tempdir(), "vignettes", "vig_build_tmp"))) {
  unlink(file.path(tempdir(), "vignettes", "vig_build_tmp"), recursive = TRUE, force = TRUE)
}
dir.create(file.path(tempdir(), "vignettes", "vig_build_tmp"), recursive = TRUE)
withr::local_options(f1dataR.cache = file.path(tempdir(), "vignettes", "vig_build_tmp"))

f1dataR::setup_fastf1()
```

## Basics

`f1dataR` serves as a tool to get neatly organized Formula 1 data into your R environment. Here we will go over the basic functions to understand how the package works.

The most sought-after aspect of F1 data is telemetry data.
Let's get Leclerc's fastest lap from the first race of 2022:

```{r telem}
library(f1dataR)

load_driver_telemetry(2022, 1, driver = "LEC", laps = "fastest")
```

Now let's use ggplot2 to visualize some of the data we have

```{r simple_plot, warning=FALSE, message=FALSE, eval=require('ggplot2', quietly = TRUE)}
library(dplyr)
library(ggplot2)

lec <- load_driver_telemetry(2022, 1, driver = "LEC", laps = "fastest") %>%
  head(300)

ggplot(lec, aes(distance, throttle)) +
  geom_line() +
  theme_minimal()
```

What if we get more drivers involved. Let's also get the Qualifying data from Hamilton and Pérez

```{r triple_plot, eval=require('ggplot2', quietly = TRUE)}
ham <- load_driver_telemetry(2022, 1, "Q", driver = "HAM", laps = "fastest") %>%
  head(300)

per <- load_driver_telemetry(2022, 1, driver = "PER", laps = "fastest") %>%
  head(300)

data <- bind_rows(lec, ham, per)

ggplot(data, aes(distance, throttle, color = driver_code)) +
  geom_line() +
  theme_minimal()
```

## Integrated plotting

There are a couple of functions in the package that help with plotting. The first one is `theme_dark_f1()` that simply applies a theme similar to the official F1 graphics. We can apply it to our previous data.

```{r use_theme, eval=all(require('ggplot2', quietly = TRUE),require('dplyr', quietly = TRUE))}
ggplot(data, aes(distance, speed, color = driver_code)) +
  geom_line() +
  theme_dark_f1() +
  theme(
    axis.title = element_text(),
    axis.line = element_line(color = "white"),
  ) +
  labs(
    title = "Speed Comparison for Bahrain 2022"
  )
```

Another built-in function is `plot_fastest()` that can plot the speed or gear changes throughout the fastest lap for a driver/race.

```{r use_builtin, eval=require('ggplot2', quietly = TRUE)}
plot_fastest(2022, 1, "R", "PER")
```

## Combining several functions

Now let's look at a more complete analysis. We want to visualize how lap time change over time (tyre age) for Pérez with every compound used in the Spanish GP.

```{r session_laps, eval=require('ggplot2', quietly = TRUE)}
laps <- load_session_laps(2023, "Spain") %>%
  filter(driver == "PER") %>%
  group_by(compound) %>%
  # Remove in and out laps
  filter(tyre_life != 1 & tyre_life != max(tyre_life)) %>%
  ungroup()

ggplot(laps, aes(tyre_life, lap_time, color = compound)) +
  geom_line() +
  geom_point() +
  theme_dark_f1(axis_marks = TRUE) +
  labs(
    color = "Tyre Compound",
    y = "Lap Time (Seconds)",
    x = "Tyre Life (Laps)"
  ) +
  scale_color_manual(
    values = c("white", "yellow", "red")
  ) +
  scale_y_continuous(breaks = seq(75, 85, 1)) +
  scale_x_continuous(breaks = seq(2, 26, 4))
```

Now let's visualize the portion of the track where Verstappen had the throttle 100% open in the 2023 Canadian GP.

```{r telem_plotting, eval=require('ggplot2', quietly = TRUE)}
ver_can <- load_driver_telemetry(
  season = 2023,
  round = "Canada",
  driver = "VER",
  laps = "fastest"
) %>%
  mutate(open_throttle = ifelse(throttle == 100, "Yes", "No"))

ggplot(ver_can, aes(x, y, color = as.factor(open_throttle), group = NA)) +
  geom_path(linewidth = 4, lineend = "round") +
  scale_color_manual(values = c("white", "red")) +
  theme_dark_f1() +
  labs(
    title = "Verstappen Flat Out",
    subtitle = "Canada 2023 | Fastest Lap",
    color = "Throttle 100%"
  )
```

For a simpler visualization let's look at the average time it took each team to pit in round 4 of 2023. For this we will have to load the pit data, the results data (to extract driver + team combos), and the constructor data to get the colors for our plot.

```{r pitstop, eval=require('ggplot2', quietly = TRUE)}
pit_data <- load_pitstops(2023, 4)

driver_team <- load_results(2023, 4) %>%
  select(driver_id, constructor_id)

constructors <- constructor_data %>%
  select(constructor_id, constructor_color) %>%
  unique()

pit_constructor <- pit_data %>%
  left_join(driver_team, by = "driver_id") %>%
  group_by(constructor_id) %>%
  summarise(pit_time = mean(as.numeric(duration))) %>%
  left_join(constructors, by = "constructor_id")


ggplot(pit_constructor, aes(x = constructor_id, y = pit_time, fill = constructor_id)) +
  geom_bar(stat = "identity", fill = pit_constructor$constructor_color) +
  theme_dark_f1(axis_marks = TRUE) +
  theme(
    legend.position = "none"
  ) +
  labs(
    x = "Constructor",
    y = "Average Pit Time (seconds)"
  )
```

# Help
If you're having trouble with `fastf1 is not available` errors, please check out the "Setup FastF1 Connection" vignette (`vignette("setup_fastf1", "f1dataR")`).
